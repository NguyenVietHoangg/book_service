block stylesheets
  link(rel='stylesheet' href='/admin/plugins/bootstrap-table/bootstrap-table.min.css')
block scripts
  script(src='/admin/plugins/bootstrap-table/tableExport.min.js')
  script(src='/admin/plugins/bootstrap-table/bootstrap-table.min.js')
  script(src='/admin/plugins/bootstrap-table/extensions/export/bootstrap-table-export.min.js')
  script.
    const $table_story = $('#table_story');
    const $remove_story = $('#remove_story');
    const $filter_story = $('#filter_story');
    const $boxfilter_story = $('#box_filter_story');
    const limitRow = 30;
    var isShowImage = false;

    $(function () {
      // khởi tạo dữ liệu input (nếu có)
      $('#box_filter-story .form-filter input[name]').keydown(function(event) {
          if ( event.which == 13 ) {
              $('#box_filter_story .form-filter #filter').click();
          }
      });
      $('#box_filter_story .datepicker').datepicker({
        autoclose: true
      })      
      $filter_story.click(function () {
        $('.img-cus').removeClass('selected-img');
        $('.img-cus-input').removeClass('selected-img');
        window.idSaveAttachmenIdTmpValue = '';
        $table_story.bootstrapTable('refresh')
      });
      $('#search').keypress(function(event){
        var keycode = (event.keyCode ? event.keyCode : event.which);
        var lengthKeySearch = $('#search').val();        
        if(keycode == '13' && lengthKeySearch.length > 5){
          $('.img-cus').removeClass('selected-img');
          $('.img-cus-input').removeClass('selected-img');
          window.idSaveAttachmenIdTmpValue = '';
          event.preventDefault();
          $table_story.bootstrapTable('refresh');
          return false;
        }
      });
      $('#search').on('keydown', function() {
        $table_story.bootstrapTable('refresh');
      });
    });
    function queryParams(defaultParams) {
      var params = defaultParams;
      $boxfilter_story.find('input[name]').each(function () {
        params[$(this).attr('name')] = $(this).val()
      })
      $boxfilter_story.find('select').each(function () {
        params[$(this).attr('name')] = $(this).val()
      })
      $boxfilter_story.find('input[status]').each(function () {
        params[$(this).attr('status')] = $(this).val()
      })
      $boxfilter_story.find('input[view]').each(function () {
        params[$(this).attr('view')] = $(this).val()
      })
      $boxfilter_story.find('input[idCollection]').each(function () {
        params[$(this).attr('idCollection')] = $(this).val()
      })
      $boxfilter_story.find('input[idCategory]').each(function () {
        params[$(this).attr('idCategory')] = $(this).val()
      })
      $boxfilter_story.find('input[positionCategory]').each(function () {
        params[$(this).attr('positionCategory')] = $(this).val()
      })
      $boxfilter_story.find('input[categoryId]').each(function () {
        params[$(this).attr('categoryId')] = $(this).val()
      })
      $boxfilter_story.find('input[collectionId]').each(function () {
        params[$(this).attr('collectionId')] = $(this).val()
      })
      $boxfilter_story.find('input[start_date]').each(function () {
        params[$(this).attr('start_date')] = $(this).val()
      })
      $boxfilter_story.find('input[end_date]').each(function () {
        params[$(this).attr('end_date')] = $(this).val()
      })
      //- params.limit = 2
      return params;
    }

    $('#search,#view,#status,#idCollection,#idCategory, #positionCategory, #categoryId, #collectionId, #start_date, #end_date').on('change', function() {
      setTimeout(() => {
        $table_story.bootstrapTable('refresh');
      }, 100);       
    });

    function initTable(dataLoad={}) {
      $('.img-cus').removeClass('selected-img');
      $('.img-cus-input').removeClass('selected-img');
      window.idSaveAttachmenIdTmpValue = '';
      setTimeout(() => {
        if ($(".img-colorbox")) {
          $(".img-colorbox").colorbox({rel:'img-colorbox', width: '90%',height: '90%', maxWidth: '640px', maxHeight: '640px'});
        }
      }, 200);
      var fieldsTable = [{
        field: 'state',
        checkbox: true,
        align: 'center',
        valign: 'middle',
        class: 'valign-middle'
      }];
      var onlyImage = false
      for (let iField = 0; iField < fields.length; iField++) {
        if (fields[iField].formatter === 'imageFormatter') {
          fieldsTable.push({
            field: fields[iField].field,
            title: 'image',
            sortable: true,
            editable: true,
            align: 'left',
            valign: 'middle',
            formatter: imageFormatter
          });
          var $viewImage = fields[iField].field;
          onlyImage = true
        } else {
          let item = {field: fields[iField].field};
          item.title = fields[iField].title || fields[iField].field;
          item.align = fields[iField].align || 'center';
          item.valign = fields[iField].valign || 'middle';
          item.class = fields[iField].class || 'middle';
          item.sortable = fields[iField].sortable || true;
          item.editTable = fields[iField].editTable || true;
          if (fields[iField].formatter) {
            item.formatter = fields[iField].formatter;
          } else {
            item.formatter = 'formarterString'
          }
          fieldsTable.push(item);
        }
      }

      if (dataLoad.onlyImage) {
        fieldsTable.shift()
        fieldsTable.push({
          field: 'operate',
          title: 'Actions',
          align: 'right',
          valign: 'middle',
          //- events: operateEvents,
          formatter: imageMoreFormatter
        });
      } else {
        fieldsTable.push({
          field: 'operate',
          title: 'Actions',
          align: 'right',
          valign: 'middle',
          //- events: operateEvents,
          formatter: operateFormatter
        });
      }
        
      $table_story.bootstrapTable({
        formatLoadingMessage: function () {
          return '<div class="table-loading-data"><img src="/admin/images/table-loading-data.svg"/></div>';
        },
        height: getHeight(),
        icons: {
          columns: 'fa-th-list',
          export: 'fa-file'
        },
        columns: [
          fieldsTable
        ],
        pageSize: setLimitRow ? setLimitRow : limitRow
      });
      // sometimes footer render error.
      setTimeout(() => {
        $table_story.bootstrapTable('resetView');
      }, 200);
      $table_story.on('check.bs.table uncheck.bs.table ' +
        'check-all.bs.table uncheck-all.bs.table', () => {
          $remove_story.prop('disabled', !$table_story.bootstrapTable('getSelections').length);
          // save your data, here just save the current page
          selections = getIdSelections();
          // push or splice the selections if you want to save all data selections
        });
      $remove_story.click(() => {
        Swal.fire({
          title: 'Bạn có chắc chắn xóa?',
          text: "Dữ liệu được chọn sẽ bị xóa khỏi hệ thống nếu đồng ý!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#969696',
          confirmButtonText: 'ĐỒNG Ý',
          cancelButtonText: 'HỦY BỎ',
        }).then((result) => {
          if (result.value) {
            const ids = getIdSelections();
            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
              if (this.readyState == 4 && this.status == 200) {
                //- window.location.href = urlManager;
                $('tr.selected').remove()
                $.notify("Success", { position:"bottom right", className: "success" });
              }
            };
            xhttp.open('DELETE', urlManager + '/remove/0/?ids=' + ids, true);
            xhttp.send();
          }
        })
      });
      $(window).resize(() => {
        $table_story.bootstrapTable('resetView', {
          height: getHeight()
        });
      });
    }
    function formarterString(value, row, index) {
      return window.substringchar(value)
    }
    function getIdSelections() {
      return $.map($table_story.bootstrapTable('getSelections'), ({ id }) => id);
    }
    function responseHandler(res) {
      return res;
    }
    /*=== Function table formatter ===*/
    //- function menuTitleFormatter(value, row, index) {
    //-   let html = '';
    //-   if (!row.parent) {
    //-     html += '<div class="node-parent">'+ row.title +'</div>';
    //-   } else {
    //-     html += '<div class="node-children">'+ row.title +'</div>';
    //-   }
    //-   return html;
    //- }

    function orderFormatter(value, row, index) {
      let html = '';
      html += '<span class="fa fa-angle-double-up update-order" title="Move up" onclick="updateOrder(\''+ row.id + '\', 1)"></span>';
      html += '<span class="fa fa-angle-double-down update-order" title="Move down" onclick="updateOrder(\''+ row.id + '\', 2)"></span>';
      return html;
    }

    function detailFormatter(index, row) {
      const html = [];
      $.each(row, (key, value) => {
        html.push(`<p><b>${key}:</b> ${value}</p>`);
      });
      return html.join('');
    }

    function displayParent(value, row, index)
    {      
      
      let arr = []
      if (row.position && row.position.length)
      {      
        console.log(row) 
        row.position.forEach(function(item, index) {
          if (item) {
            let vt = item.split("|")                                   
            arr.push(`<strong style='display: inline-block;'><span onclick="setPositionOrAds('${item}')" data-toggle="modal" data-target="#modal-default1" class="btn btn-link" style='padding: 2px; margin: 10px 3px; border: 2px solid; border-radius: 4px;' > ${vt[1]} <b style="color:red">[${vt[2]}]</b></span><span onclick="removeReference('${item}','${row.id}')" class="btn" style='padding: 2px; margin: 10px 3px; border: 2px solid #909090; border-radius: 4px;' ><i style='color: #909090;' class="fa fa-fw fa-trash"></i></span></span>`)
          }
        })
      }
      return (arr.join(''));      
    }

    function operateFormatter(value, row, index) {
      return [
        `<a class="btn btn-sm bg-maroon margin" href="${urlManager}/edit/${row.id}">Sửa</a>`,
      ].join('');
    }
    function imageMoreFormatter(value, row, index) {
      return [
        `<ul class='ul-btn'>`,
        `<li><a class="btn btn-block btn-success btn-xs" href="javascript: setPickEditor('${row.path}')">Content </a></li>`,
        `<li><a class="btn btn-block btn-success btn-xs img-cus-input" id="img-cus-input-${row.id}" href="javascript: setPickInput('${row.id}', '${row.path}')">Input</a></li>`,
        `</ul>`
      ].join('');
    }
    function getHeight() {
      //- return $(window).height() - $('h1').outerHeight(true);
    }
    function formatResult(data) {
      if (data.loading) {
        return data.text;
      }

      var markup = data.name;

      return markup;
    }
    function formatSelection(data) {
      return data.name || data.text;
    }

    function updateOrder(id, direction) {
      
      $.ajax({medthod: 'PUT', url: "/menu/update-order/" + id + "/" + direction, success: function(result){
        
        $table_story.bootstrapTable('refresh')
      }});
    }

    function setPickEditor (src) {
      
      var urlImg = DOMAIN_IMG + src;
      urlImg = urlImg.replace('/uploads//', '/');
      //- var urlImg = 'https://image.shutterstock.com/image-photo/white-transparent-leaf-on-mirror-260nw-577160911.jpg';
      $('.summernote').summernote('editor.saveRange');
      // Editor loses selected range (e.g after blur)
      $('.summernote').summernote('editor.restoreRange');
      $('.summernote').summernote('editor.focus');
      $('.summernote').summernote('editor.insertImage', urlImg);
      $('.modal-upload-form').modal('toggle');
    }

    function setPickInput (id, src) {
      
      imageId = id;
      var urlImg = src.indexOf('http://') != -1 || src.indexOf('https://') != -1 ? src : DOMAIN_IMG + src;
      $('.img-cus').removeClass('selected-img');
      $('.img-cus-input').removeClass('selected-img');
      $("#img-cus-"+id).addClass('selected-img');
      $("#img-cus-input-"+id).addClass('selected-img');
      window.idSaveAttachmenIdTmpValue = urlImg;
      window.imageId.Tmp = urlImg;
      //- $('.modal-upload-form').modal('toggle');
    }

    function imageFormatter(value, row, index) {
      let urlImg = DOMAIN_IMG;
      if (value && value != '') {
        if (value.indexOf('http://') != -1 || value.indexOf('http://') != -1) {
          urlImg = value
        } else {
          urlImg += value;
        }
      } else if (row.path && row.path != '') {
        urlImg += row.path;
      }
      let html = '';
      html += '<a class="image img-colorbox" href="' + urlImg + '" title="' + row.name + '" target="_blank" rel="img-colorbox">';
      html += '<img class="img img-cus img-responsive" id="img-cus-'+row.id+'" src="' + urlImg + '" style="" />';
      html += '</a>';
      return html;
    }

    function showCategories(value, row, index) {
      let shows = []
      if (value.length) {
        value.forEach(function(item) {          
          shows.push('<a target="_blank" href="/admin/category/edit/'+item.id+'"class="btn bg-purple btn-flat margin" style="margin-right: 1px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }   

    function showTime(value, row, index)
    {    
      
      let arr = []
      arr.push(`<b id="showTime${row.id}" value="${row.publishedAt}"> ${row.publishedAt} <b>`)      
      return (arr.join(''));      
    }

    function showCollections(value, row, index) {
      let shows = []
      if (value.length) {
        value.forEach(function(item) {
          shows.push('<a target="_blank" href="/admin/collection/edit/'+item.id+'"class="btn bg-olive btn-flat margin" style="margin-right: 1px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }

    function showTags(value, row, index) {
      let shows = []
      if (value.length) {
        value.forEach(function(item) {
          shows.push('<a target="_blank" href="/admin/tag/edit/'+item.id+'"class="btn bg-orange btn-flat margin" style="margin-right: 1px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }

    function showStatus(value, row, index) {      
      const pushValue = value == 'on' ? 'off' : 'on';
      let btn = value == 'on' ? 'btn btn-success' : 'btn-default';
      return '<div  value='+value+' id="change-status-'+row.id+'" class="btn '+btn+'" onclick="changeStatus('+"'"+row.id+"'"+','+"'"+pushValue+"'"+')">'+value+'</div>';
    }

    function changeStatus(id, status) {
      let val = $("#change-status-" + id).text()
      $.ajax({
        url: 'ads/changestatus/'+id,
        method: 'post',
        data: {status, id},
        success: function(res) {
          if (res) {
            const dom_id = $('#change-status-'+id);
            const on_click = 'changeStatus('+"'"+id+"'"+','+"'"+(status === "on" ? "off" : "on")+"'"+')';
            dom_id.text(status === "on" ? "on" : "off");
            dom_id.removeClass("btn-success").removeClass("btn-default");
            dom_id.addClass(status === "on" ? "btn-success" : "btn-default");
            dom_id.attr("onclick", on_click);
            $.notify("Success", { position:"bottom right", className: "success" });
          } else {
            $.notify("Error", { position:"bottom right", className: "error" });
          }
        }
      })  
    }
    $(() => {
      if (typeof(disableLoad) === 'undefined') {
        initTable();
      }
    });
    var btnImage = '<div class="note-btn-group btn-group note-insert"><a class="btn btn-default" id="render-avatar" href="javascript:;" onclick="initUploadAws('+"'add-to-editor-2'"+')">Choose image &nbsp;<i class="fa fa-image"></i><input class="form-control" id="avatar2" name="avatar2" value="" type="hidden"></a></div>';
    $(function () {
      $('.note-toolbar').append(btnImage);
    }); 

    function setPositionOrAds(position) {
     let positionId = position.split("|")     
     let positionIdNew = positionId[1]+"|"+positionId[2]    
     $('#modal').modal('show') 
     $.ajax(
          {
            url: "/ads/findPositionAds",    
            method: "post",
            data:
            {              
              position: positionIdNew                        
            },
            success: function (res) {             
              $('.getList').text("")                       
              $('.setPosition').text(res.position)  
              let sum=1                
              for(let i=0;i<res.adsReference.length;i++){  
                const pushValue = res.adsReference[i].statusAds == 'on' ? 'off' : 'on';
                let btn = res.adsReference[i].statusAds == 'on' ? 'btn btn-success' : 'btn-default';          
                let text = ['<tr>',
                '<td>'+sum+'</td>',
                '<td>'+res.adsReference[i].nameAds+'</td>',
                '<td>'+res.adsReference[i].dateFrom+'</td>',
                '<td>'+res.adsReference[i].dateTo+'</td>',  
                '<td>'+res.adsReference[i].alwayShow+'</td>',
                '<td><button value='+res.adsReference[i].statusAds+' id="change-status-'+res.adsReference[i].adsId+'"   class="btn '+btn+'"  >'+res.adsReference[i].statusAds+'</button></td>',
                //- '<td><button value='+res.adsReference[i].statusAds+' id="change-status-'+res.adsReference[i].adsId+'" onclick="changeStatus1('+"'"+res.adsReference[i].adsId+"'"+','+"'"+pushValue+"'"+')"  class="btn '+btn+'"  >'+res.adsReference[i].statusAds+'</button></td>',                            
                '</tr>'].join('')
                $('.getList').append(text);
                sum++
              }
             
              //-  function showPosition(res) {                   
              //-     let arr = []
              //-     arr.push(`<div>${res.adsPositionId}</div>`)                
              //-     return (arr.join(''));           
              //-   }
            }
          });
    }

    function removeReference(adsPositionId,adsId) {
      Swal.fire({
          title: 'Bạn có chắc chắn xóa?',
          text: "Dữ liệu được chọn sẽ bị xóa khỏi vị trí đã chọn!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#969696',
          confirmButtonText: 'ĐỒNG Ý',
          cancelButtonText: 'HỦY BỎ',
        }).then((result) => {
          if (result.value) {
            $.ajax(
          {
            url: "/ads/removeReference",    
            method: "post",
            data:
            {              
              adsId: adsId,
              adsPositionId: adsPositionId                       
            },
            success: function (res) {            
              location.href=''
            }
          });
          }          
        })   
    }
    



    
  