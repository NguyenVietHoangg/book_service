block stylesheets
  link(rel='stylesheet' href='/admin/plugins/bootstrap-table/bootstrap-table.min.css')
  link(rel='stylesheet' href='/admin/plugins/datetimepicker/jquery.datetimepicker.min.css')
block scripts
  script(src='/admin/plugins/bootstrap-table/tableExport.min.js')
  script(src='/admin/plugins/bootstrap-table/bootstrap-table.min.js')
  script(src='/admin/plugins/bootstrap-table/extensions/export/bootstrap-table-export.min.js')
  script(src='/admin/plugins/datetimepicker/jquery.datetimepicker.min.js')
  script.
    const $table_story = $('#table_story');
    const $remove_story = $('#remove_story');
    const $filter_story = $('#filter_story');
    const $boxfilter_story = $('#box_filter_story');
    const $sync_to_cate = $('#sync_to_cate');
    const $sync_to_story = $('#sync_to_story');
    const limitRow = 30;
    var isShowImage = false;
    console.log(DOMAIN_IMG);
    $(function () {
      // Đồng bộ số lượng truyện vào thể loại
      $sync_to_cate.click(function() {
        $.ajax({
          url: 'story/synctocategory',
          method: 'post',
          success: function(res) {
            $.notify(res, { position:"bottom right", className: "success" });
          }
        })
      })

      // Đồng bộ số lượng chương vào truyện
      $sync_to_story.click(function() {
        $.ajax({
          url: 'story/synctostory',
          method: 'post',
          success: function(res) {
            $.notify(res, { position:"bottom right", className: "success" });
          }
        })
      })
      // khởi tạo dữ liệu input (nếu có)
      $('#box_filter-story .form-filter input[name]').keydown(function(event) {
          if ( event.which == 13 ) {
            $('#box_filter_story .form-filter #filter').click();
            $('#positionCategory, #view').val('')
          }
      });
      $('#box_filter_story .datepicker').datepicker({
        autoclose: true
      })      
      $filter_story.click(function () {
        $('.img-cus').removeClass('selected-img');
        $('.img-cus-input').removeClass('selected-img');
        window.idSaveAttachmenIdTmpValue = '';
        $table_story.bootstrapTable('refresh')
      });
      $('#search').keypress(function(event){
        var keycode = (event.keyCode ? event.keyCode : event.which);
        var lengthKeySearch = $('#search').val();        
        if(keycode == '13' && lengthKeySearch.length > 3){
          $('#positionCategory, #view').val('')
          $('.img-cus').removeClass('selected-img');
          $('.img-cus-input').removeClass('selected-img');
          window.idSaveAttachmenIdTmpValue = '';
          event.preventDefault();
          $table_story.bootstrapTable('refresh');
          return false;
        }
      });
      //- $('#search').on('keydown', function() {
      //-   $table_story.bootstrapTable('refresh');
      //- });
    });
    function queryParams(defaultParams) {
      var params = defaultParams;
      $boxfilter_story.find('input[name]').each(function () {
        params[$(this).attr('name')] = $(this).val()
      })
      $boxfilter_story.find('select').each(function () {
        params[$(this).attr('name')] = $(this).val()
      })
      $boxfilter_story.find('input[status]').each(function () {
        params[$(this).attr('status')] = $(this).val()
      })
      $boxfilter_story.find('input[view]').each(function () {
        params[$(this).attr('view')] = $(this).val()
      })
      $boxfilter_story.find('input[idCollection]').each(function () {
        params[$(this).attr('idCollection')] = $(this).val()
      })
      $boxfilter_story.find('input[idCategory]').each(function () {
        params[$(this).attr('idCategory')] = $(this).val()
      })
      $boxfilter_story.find('input[positionCategory]').each(function () {
        params[$(this).attr('positionCategory')] = $(this).val()
      })
      $boxfilter_story.find('input[categoryId]').each(function () {
        params[$(this).attr('categoryId')] = $(this).val()
      })
      $boxfilter_story.find('input[collectionId]').each(function () {
        params[$(this).attr('collectionId')] = $(this).val()
      })
      $boxfilter_story.find('input[start_date]').each(function () {
        params[$(this).attr('start_date')] = $(this).val()
      })
      $boxfilter_story.find('input[end_date]').each(function () {
        params[$(this).attr('end_date')] = $(this).val()
      })
      $boxfilter_story.find('input[updatedBy]').each(function () {
        params[$(this).attr('updatedBy')] = $(this).val()
      })
      $boxfilter_story.find('input[fromId]').each(function () {
        params[$(this).attr('fromId')] = $(this).val()
      })
      $boxfilter_story.find('input[haveChapter]').each(function () {
        params[$(this).attr('haveChapter')] = $(this).val()
      })
      //- params.limit = 2
      return params;
    }
    $('#view, #status, #idCollection, #idCategory, #positionCategory, #categoryId, #collectionId, #start_date, #end_date, #updatedBy, #fromId, #haveChapter').on('change', function() {
      var idChoose = $(this).attr('id')
      var tmpColId = $('#collectionId').val()
      var tmpColId2 = $('#categoryId').val()
      var poColId = $('#positionCategory').val()
      var topTheLoai = $('#idCategory').val()
      var topTrangChu = $('#idCollection').val()
      var statusx = $('#status').val()
      var view = $('#view').val()
      switch(idChoose) {
        case 'collectionId':
          $('.form-control').val('')
          $('#positionCategory').val(poColId)
          $('#collectionId').val(tmpColId)
          if (!tmpColId) {
            $.notify("Vui lòng chọn Bộ sưu tập", { position:"top right", className: "error" });
          } else if (!poColId) {
            $.notify("Vui lòng chọn Vị Trí Theo (Focus, Slide, New) hoặc Top Lượt Xem", { position:"top right", className: "error" });
          } else {
            setTimeout(() => {
              $table_story.bootstrapTable('refresh');
            }, 100);
          }
          break;
        case 'categoryId':
          $('.form-control').val('')
          $('#positionCategory').val(poColId)
          $('#categoryId').val(tmpColId2)
          $('#status').val(statusx)
          setTimeout(() => {
            $table_story.bootstrapTable('refresh');
          }, 100);
          break;
        case 'status':
          $('.form-control').val('')
          $('#positionCategory').val(poColId)
          $('#categoryId').val(tmpColId2)
          $('#status').val(statusx)
          setTimeout(() => {
            $table_story.bootstrapTable('refresh');
          }, 100);
          break;
        case 'positionCategory':
          $('.form-control').val('')
          $('#positionCategory').val(poColId)
          $('#collectionId').val(tmpColId)
          $('#categoryId').val(tmpColId2)
          if (!poColId) {
            $.notify("Vui lòng chọn Vị Trí Theo (Focus, Slide, New) hoặc Top Lượt Xem", { position:"top right", className: "error" });
          }
          if (!tmpColId && !tmpColId2) {
            $.notify("Vui lòng chọn Danh Mục hoặc Bộ Sưu Tập", { position:"top right", className: "error" });
            break;
          } if (tmpColId && tmpColId2) {
            $('#collectionId').val('')
            setTimeout(() => {
              $table_story.bootstrapTable('refresh');
            }, 100);
          } else {
            if (tmpColId) {
              $('#collectionId').val(tmpColId)
            } else {
              $('#categoryId').val(tmpColId2)
            }
            setTimeout(() => {
              $table_story.bootstrapTable('refresh');
            }, 100);
          }
          break;
        case 'view':
          $('.form-control').val('')
          $('#categoryId').val(topTheLoai)
          $('#view').val(view)
          $('#status').val(status)
          setTimeout(() => {
            $table_story.bootstrapTable('refresh');
          }, 100);
          break;
        default:
          $('#positionCategory, #view').val('')
          setTimeout(() => {
            $table_story.bootstrapTable('refresh');
          }, 100);
          break;
      }
    });

    function initTable(dataLoad={}) {
      $('.img-cus').removeClass('selected-img');
      $('.img-cus-input').removeClass('selected-img');
      window.idSaveAttachmenIdTmpValue = '';
      setTimeout(() => {
        if ($(".img-colorbox")) {
          $(".img-colorbox").colorbox({rel:'img-colorbox', width: '90%',height: '90%', maxWidth: '640px', maxHeight: '640px'});
        }
      }, 200);
      var fieldsTable = [{
        field: 'state',
        checkbox: true,
        align: 'center',
        valign: 'middle',
        class: 'valign-middle'
      }];
      var onlyImage = false
      for (let iField = 0; iField < fields.length; iField++) {
        if (fields[iField].formatter === 'imageFormatter') {
          fieldsTable.push({
            field: fields[iField].field,
            title: 'image',
            sortable: true,
            editable: true,
            align: 'left',
            valign: 'middle',
            formatter: imageFormatter
          });
          var $viewImage = fields[iField].field;
          onlyImage = true
        } else {
          let item = {field: fields[iField].field};
          item.title = fields[iField].title || fields[iField].field;
          item.align = fields[iField].align || 'center';
          item.valign = fields[iField].valign || 'middle';
          item.class = fields[iField].class || 'middle';
          item.sortable = fields[iField].sortable || true;
          item.editTable = fields[iField].editTable || true;
          if (fields[iField].formatter) {
            item.formatter = fields[iField].formatter;
          } else {
            item.formatter = 'formarterString'
          }
          fieldsTable.push(item);
        }
      }

      if (dataLoad.onlyImage) {
        fieldsTable.shift()
        fieldsTable.push({
          field: 'operate',
          title: 'Actions',
          align: 'right',
          valign: 'middle',
          //- events: operateEvents,
          formatter: imageMoreFormatter
        });
      } else {
        fieldsTable.push({
          field: 'operate',
          title: 'Actions',
          align: 'right',
          valign: 'middle',
          //- events: operateEvents,
          formatter: operateFormatter
        });
      }
        
      $table_story.bootstrapTable({
        formatLoadingMessage: function () {
          return '<div class="table-loading-data"><img src="/admin/images/table-loading-data.svg"/></div>';
        },
        height: getHeight(),
        icons: {
          columns: 'fa-th-list',
          export: 'fa-file'
        },
        columns: [
          fieldsTable
        ],
        pageSize: setLimitRow ? setLimitRow : limitRow
      });
      // sometimes footer render error.
      setTimeout(() => {
        $table_story.bootstrapTable('resetView');
      }, 200);
      $table_story.on('check.bs.table uncheck.bs.table ' +
        'check-all.bs.table uncheck-all.bs.table', () => {
          $remove_story.prop('disabled', !$table_story.bootstrapTable('getSelections').length);
          // save your data, here just save the current page
          selections = getIdSelections();
          // push or splice the selections if you want to save all data selections
        });
      $remove_story.click(() => {
        Swal.fire({
          title: 'Bạn có chắc chắn xóa?',
          text: "Dữ liệu được chọn sẽ bị xóa khỏi hệ thống nếu đồng ý!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#969696',
          confirmButtonText: 'ĐỒNG Ý',
          cancelButtonText: 'HỦY BỎ',
        }).then((result) => {
          if (result.value) {
            const ids = getIdSelections();
            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
              if (this.readyState == 4 && this.status == 200) {
                //- window.location.href = urlManager;
                $('tr.selected').remove()
                $.notify("Success", { position:"bottom right", className: "success" });
              }
            };
            xhttp.open('DELETE', urlManager + '/remove/0/?ids=' + ids, true);
            xhttp.send();
          }
        })
      });
      $(window).resize(() => {
        $table_story.bootstrapTable('resetView', {
          height: getHeight()
        });
      });
    }
    function formarterString(value, row, index) {
      return window.substringchar(value)
    }
    function getIdSelections() {
      return $.map($table_story.bootstrapTable('getSelections'), ({ id }) => id);
    }
    function responseHandler(res) {
      return res;
    }
    /*=== Function table formatter ===*/
    function menuTitleFormatter(value, row, index) {
      let html = '';
      if (!row.parent) {
        html += '<div class="node-parent">'+ row.title +'</div>';
      } else {
        html += '<div class="node-children">'+ row.title +'</div>';
      }
      return html;
    }

    function orderFormatter(value, row, index) {
      let html = '';
      html += '<span class="fa fa-angle-double-up update-order" title="Move up" onclick="updateOrder(\''+ row.id + '\', 1)"></span>';
      html += '<span class="fa fa-angle-double-down update-order" title="Move down" onclick="updateOrder(\''+ row.id + '\', 2)"></span>';
      return html;
    }

    function detailFormatter(index, row) {
      const html = [];
      $.each(row, (key, value) => {
        html.push(`<p><b>${key}:</b> ${value}</p>`);
      });
      return html.join('');
    }

    function operateFormatter(value, row, index) {
      console.log('row', row)
      return [
        `<a class="btn btn-sm bg-maroon margin" target="_blank" href="${urlManager}/edit/${row.id}">Sửa</a>`,
        `<a class="btn btn-sm bg-orange margin" target="_blank" href="${DOMAIN_CLIENT}/story/${row.slug}?preview_a_story=preview_a_story" title="Xem Nhanh">Xem</a>`,
        `<a class="btn btn-sm bg-orange margin" target="_blank" href="${row.source_crawler_1}" title="Xem Nhanh">Nguồn</a>`,
        `<a class="btn btn-sm bg-purple margin" href="javascript: reCrawler('${row.source_crawler_1}', '${row.id}')">Re-crawler</a>`,
        `<a class="btn btn-sm bg-green margin" href="/admin/chapter/story/${row.id}" target="_blank">Ds Chương</a>`,
        `<a class="btn btn-sm bg-aqua margin" href="javascript: syncNewest('${row.id}')">Sync Total</a>`,
      ].join('');
    }
    function imageMoreFormatter(value, row, index) {
      return [
        `<ul class='ul-btn'>`,
        `<li><a class="btn btn-block btn-success btn-xs" href="javascript: setPickEditor('${row.path}')">Content </a></li>`,
        `<li><a class="btn btn-block btn-success btn-xs img-cus-input" id="img-cus-input-${row.id}" href="javascript: setPickInput('${row.id}', '${row.path}')">Input</a></li>`,
        `</ul>`
      ].join('');
    }
    function getHeight() {
      //- return $(window).height() - $('h1').outerHeight(true);
    }
    function formatResult(data) {
      if (data.loading) {
        return data.text;
      }

      var markup = data.name;

      return markup;
    }
    function formatSelection(data) {
      return data.name || data.text;
    }

    function updateOrder(id, direction) {
      $.ajax({medthod: 'PUT', url: "/menu/update-order/" + id + "/" + direction, success: function(result){
        $table_story.bootstrapTable('refresh')
      }});
    }

    function reCrawler(link, id) {
      Swal.fire({
        title: 'Bạn có chắc chắn crawler lại truyện này?',
        text: "Dữ liệu truyện này sẽ đươc crawler lại!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#969696',
        confirmButtonText: 'ĐỒNG Ý',
        cancelButtonText: 'HỦY BỎ',
      }).then((result) => {
        if (result.value) {
          $.ajax({
            url: 'story/crawler_story',
            method: 'post',
            data: {link: link, storyId: id},
            success: function(res) {
              $.notify("Success", { position:"bottom right", className: "success" });
            }
          })
        }
      })
    }

    function syncNewest(id) {
      Swal.fire({
        title: 'Bạn có chắc chắn đồng bộ số chương truyện?',
        text: "Dữ liệu về số chương này sẽ đươc đồng bộ lại lại!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#969696',
        confirmButtonText: 'ĐỒNG Ý',
        cancelButtonText: 'HỦY BỎ',
      }).then((result) => {
        if (result.value) {
          $.ajax({
            url: 'story/synctonewstchapter',
            method: 'post',
            data: {storyId: id},
            success: function(res) {
              $.notify("Success", { position:"bottom right", className: "success" });
            }
          })
        }
      })
    }

    function setPickEditor (src) {
      var urlImg = DOMAIN_IMG + src;
      urlImg = urlImg.replace('/uploads//', '/');
      //- var urlImg = 'https://image.shutterstock.com/image-photo/white-transparent-leaf-on-mirror-260nw-577160911.jpg';
      $('.summernote').summernote('editor.saveRange');
      // Editor loses selected range (e.g after blur)
      $('.summernote').summernote('editor.restoreRange');
      $('.summernote').summernote('editor.focus');
      $('.summernote').summernote('editor.insertImage', urlImg);
      $('.modal-upload-form').modal('toggle');
    }

    function titleCustom(value, row, index) {
      return [
        '<a href="'+window.DOMAIN_CLIENT+'/story/'+row.slug+'" target="_blank"><strong style="color: green;">'+row.name+'</strong></a>',
        row.totalChapter ? '<span style="color: red">['+row.totalChapter+ ' Chương]</span>' : '<span style="color: red">[0 Chương]</span>'
      ].join('<br />')
    }

    function setPickInput (id, src) {
      imageId = id;
      var urlImg = src.indexOf('http://') != -1 || src.indexOf('https://') != -1 ? src : DOMAIN_IMG + src;
      $('.img-cus').removeClass('selected-img');
      $('.img-cus-input').removeClass('selected-img');
      $("#img-cus-"+id).addClass('selected-img');
      $("#img-cus-input-"+id).addClass('selected-img');
      window.idSaveAttachmenIdTmpValue = urlImg;
      window.imageId.Tmp = urlImg;
      //- $('.modal-upload-form').modal('toggle');
    }

    function imageFormatter(value, row, index) {
      let urlImg = DOMAIN_IMG;
      if (value && value != '') {
        if (value.indexOf('http://') != -1 || value.indexOf('http://') != -1) {
          urlImg = value
        } else {
          urlImg += value;
        }
      } else if (row.path && row.path != '') {
        urlImg += row.path;
      }
      let html = '';
      html += '<a class="image img-colorbox" href="' + urlImg + '" title="' + row.name + '" target="_blank" rel="img-colorbox">';
      html += '<img class="img img-cus img-responsive" id="img-cus-'+row.id+'" src="' + urlImg + '" style="" />';
      html += '</a>';
      return html;
    }

    function showCategories(value, row, index) {
      if (!row.contentRef) {
        return null
      }
      const content = JSON.parse(row.contentRef);
      if (!content.categories.length) {
        return null
      }
      let shows = [];
      if (row.category_stories && row.category_stories.length) {
        var positionCategory = $('#positionCategory').val()
        if (positionCategory) {
          shows.push('<p style="font-weight: bold; color: red;">[ '+positionCategory+' '+row.category_stories[0]['positionFocus']+']')
        }
      }
      if (content.categories) {
        content.categories.forEach(function(item) {          
          shows.push('<a target="_blank" href="/admin/category/edit/'+item.id+'"class="btn bg-purple btn-flat margin" style="border-radius: 3px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }

    function showTime(value, row, index)
    {    
      
      let arr = []
      arr.push(`<b id="showTime${row.id}" value="${row.publishedAt}"> ${row.publishedAt} <b>`)      
      return (arr.join(''));      
    }

    function showCollections(value, row, index) {
      if (!row.contentRef) {
        return null
      }
      const content = JSON.parse(row.contentRef);
      if (!content.collections.length) {
        return null
      }
      let shows = []
      if (row.collection_stories && row.collection_stories.length) {
        var positionCategory = $('#positionCategory').val()
        shows.push('<p style="font-weight: bold; color: red;">[ '+positionCategory+' '+row.collection_stories[0]['position']+']')
      }
      if (content.collections.length) {
        content.collections.forEach(function(item) {
          shows.push('<a target="_blank" href="/admin/collection/edit/'+item.id+'"class="btn bg-olive btn-flat margin" style="border-radius: 3px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }

    function showTags(value, row, index) {
      if (!row.contentRef) {
        return null
      }
      const content = JSON.parse(row.contentRef);
      if (!content.tags.length) {
        return null
      }
      let shows = []
      if (content.tags.length) {
        content.tags.forEach(function(item) {
          shows.push('<a target="_blank" href="/admin/tag/edit/'+item.id+'"class="btn bg-orange btn-flat margin" style="border-radius: 3px; text-align: center;">'+item.name+'</a>')
        })
      }
      return shows.join('');
    }

    function showStatus(value, row, index) {
      return '<div  value='+value+' id="change-status-'+row.id+'" style="'+row.virtualStatus.style+'" class="btn" onclick="changeStatus('+"'"+row.id+"'"+','+"'"+value+"'"+",'"+row.publishedAt+"'"+')">'+row.virtualStatus.name+'</div>';
    }

    function formatAMPM(date) {
      date = moment(new Date(date)).utc().format() 
      date = new Date(date);
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var hours = date.getHours();
      var minutes = date.getMinutes();
      var ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12;
      hours = hours ? hours : 12; // the hour '0' should be '12'
      year = year < 10 ? '0'+year : year;
      month = month < 10 ? '0'+month : month;
      day = day < 10 ? '0'+day : day;
      hours = hours < 10 ? '0'+hours : hours;
      minutes = minutes < 10 ? '0'+minutes : minutes;
      var strTime = month + '/' +day+ '/' +year+ ', ' +hours + ':' + minutes + ' ' + ampm;
      return strTime;
    }

    function changeStatus(id, status, published) {
      $('.btn-'+status).hide()
      if (admin_type != 'admin' && !['review', 'draft'].includes(status)) {
        $.notify("Trạng thái không được quyền thao tác", { position:"top right", className: "error" });
        return
      } else if ((status == 'on') || (status = 'off')) {
        $('.btn-approved').hide()
      }
      $('#currentTime').text(published && published != 'null' ?  " "+ published : " Chưa cài đặt" )     
      $('#publishedAt').val(published && published != 'null' ?  published : "" )
      $('#myModalStatusPublishAt').modal('show')
      $('#showStoryId').val(id)
      $('#idStatus').val(status)
    }

    $(() => {
      if (typeof(disableLoad) === 'undefined') {
        initTable();
      }
    });
    var btnImage = '<div class="note-btn-group btn-group note-insert"><a class="btn btn-default" id="render-avatar" href="javascript:;" onclick="initUploadAws('+"'add-to-editor-2'"+')">Choose image &nbsp;<i class="fa fa-image"></i><input class="form-control" id="avatar2" name="avatar2" value="" type="hidden"></a></div>';
    $(function () {
      $('.note-toolbar').append(btnImage);
    });



    
  